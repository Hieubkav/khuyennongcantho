              value={q}
              onChange={(e) => setQ(e.target.value)}
            />
          </div>
          <Button asChild>
            <Link href="/dashboard/units/new">
              <Plus className="mr-2 h-4 w-4" /> Thêm mới
            </Link>
          </Button>
        </div>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Danh sách đơn vị</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="overflow-x-auto">
            <table className="w-full border-collapse text-sm">
              <thead>
                <tr className="border-b text-left text-muted-foreground">
                  <th className="py-2 pr-4 w-16">
                    <button
                      type="button"
                      className="hover:underline cursor-pointer select-none"
                      onClick={resetSortOrder}
                      title="Hiển thị theo thứ tự đã sắp xếp"
                    >
                      STT
                    </button>
                  </th>
                  <th className="py-2 pr-4">
                    <button
                      type="button"
                      className="inline-flex items-center gap-1 hover:underline cursor-pointer select-none"
                      onClick={toggleSortName}
                      title="Sắp xếp theo tên"
                    >
                      Đơn vị tính
                      {sortBy === "name" ? (
                        sortDir === "asc" ? (
                          <ArrowUp className="h-3.5 w-3.5" />
                        ) : (
                          <ArrowDown className="h-3.5 w-3.5" />
                        )
                      ) : (
                        <ArrowUpDown className="h-3.5 w-3.5 text-muted-foreground" />
                      )}
                    </button>
                  </th>
                  <th className="py-2 pr-4">Viết tắt</th>
                  <th className="py-2 pr-4">Trạng thái</th>
                  <th className="py-2 pr-4 text-right">Thao tác</th>
                </tr>
              </thead>
              <tbody>
                {filtered?.map((u, idx) => (
                  <tr
                    key={u._id}
                    className="border-b last:border-0"
                    draggable={allowDrag}
                    onDragStart={(e) => {
                      e.dataTransfer.setData("text/plain", String(u._id));
                      e.dataTransfer.effectAllowed = "move";
                    }}
                    onDragOver={(e) => allowDrag && e.preventDefault()}
                    onDrop={(e) => {
                      if (!allowDrag) return;
                      e.preventDefault();
                      const sourceId = e.dataTransfer.getData("text/plain");
                      onDropReorder(sourceId, String(u._id));
                    }}
                  >
                    <td className="py-2 pr-4 align-middle">
                      <span
                        className={"inline-flex h-6 w-6 items-center justify-center cursor-grab text-muted-foreground select-none"}
                        title={
                          allowDrag
                            ? "Kéo để sắp xếp"
                            : "Xóa tìm kiếm, hiển thị Tất cả và chọn Thứ tự để sắp xếp"
                        }
                      >
                        <GripVertical className="h-4 w-4" />
                      </span>
                      <span className="ml-2">{idx + 1}</span>
                    </td>
                    <td className="py-2 pr-4 font-medium">{u.name}</td>
                    <td className="py-2 pr-4">{u.abbr ?? "-"}</td>
                    <td className="py-2 pr-4">
                      <span
                        className={
                          u.active
                            ? "inline-flex items-center gap-1 text-green-600"
                            : "inline-flex items-center gap-1 text-gray-500"
                        }
                      >
                        <BadgeCheck className="h-4 w-4" />
                        {u.active ? "Đang dùng" : "Tạm tắt"}
                      </span>
                    </td>
                    <td className="py-2 pr-0">
                      <div className="flex justify-end gap-2">
                        <Button size="sm" variant="secondary" onClick={() => onToggle(u._id as any, !u.active)}>
                          {u.active ? "Tắt" : "Kích hoạt"}
                        </Button>
                        <Button size="sm" variant="outline" asChild>
                          <Link href={`/dashboard/units/${u._id}/edit`}>
                            <Edit className="mr-2 h-4 w-4" /> Sửa
                          </Link>
                        </Button>
                        <Button size="sm" variant="destructive" onClick={() => onDelete(u._id as any, u.name)}>
                          <Trash2 className="mr-2 h-4 w-4" /> Xóa
                        </Button>
                      </div>
                    </td>
                  </tr>
                ))}
                {filtered !== undefined && filtered.length === 0 && (
                  <tr>
                    <td colSpan={5} className="py-8 text-center text-muted-foreground">
                      Không có dữ liệu
                    </td>
                  </tr>
                )}
                {filtered === undefined && (
                  <tr>
                    <td colSpan={5} className="py-8 text-center text-muted-foreground">
                      Đang tải...
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
