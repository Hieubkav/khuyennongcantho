"use client";

import Link from "next/link";
import { useEffect, useMemo, useState } from "react";
import { useMutation, useQuery } from "convex/react";
import { api } from "@dohy/backend/convex/_generated/api";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { BadgeCheck, Edit, Plus, Search, Trash2, GripVertical, ArrowUpDown, ArrowUp, ArrowDown, AlertTriangle } from "lucide-react";
import { toast } from "sonner";
import { Tooltip, TooltipTrigger, TooltipContent } from "@/components/ui/tooltip";

export default function UnitsListPage() {
  const [q, setQ] = useState("");
  const units = useQuery(api.units.listBrief, {});
  const doDelete = useMutation(api.units.safeDelete);
  const toggleActive = useMutation(api.units.toggleActive);
  const doReorder = useMutation(api.units.reorder);

  const [list, setList] = useState<any[] | undefined>(undefined);
  const [statusFilter, setStatusFilter] = useState<"all" | "active" | "inactive">("active");
  const [sortBy, setSortBy] = useState<"order" | "name">("order");
  const [sortDir, setSortDir] = useState<"asc" | "desc">("asc");
  const allowDrag = !q.trim() && sortBy === "order" && statusFilter === "all";

  useEffect(() => {
    if (units) setList(units as any);
    else setList(undefined);
  }, [units]);

  const filtered = useMemo(() => {
    if (!list) return undefined as any[] | undefined;
    let base = !q
      ? list
      : list.filter((u) => [u.name, u.abbr ?? ""].some((t) => (t || "").toLowerCase().includes(q.toLowerCase())));
    if (statusFilter !== "all") {
      const wantActive = statusFilter === "active";
      base = base.filter((u) => !!u.active === wantActive);
    }
    if (sortBy === "name") {
      const sorted = [...base].sort((a, b) => {
        const an = (a.name ?? "").toString();
        const bn = (b.name ?? "").toString();
        const cmp = an.localeCompare(bn, "vi", { sensitivity: "base" });
        return sortDir === "asc" ? cmp : -cmp;
      });
      return sorted;
    }
    return base;
  }, [q, list, sortBy, sortDir, statusFilter]);

  const toggleSortName = () => {
    if (sortBy !== "name") {
      // 1st click: sort by name ASC
      setSortBy("name");
      setSortDir("asc");
    } else if (sortDir === "asc") {
      // 2nd click: sort by name DESC
      setSortDir("desc");
    } else {
      // 3rd click: back to default (order ASC)
      setSortBy("order");
      setSortDir("asc");
    }
  };

  const resetSortOrder = () => {
    setSortBy("order");
    setSortDir("asc");
  };

  function UnitDeleteButton({ id, name, onDelete }: { id: string; name: string; onDelete: () => void }) {
    const summary = useQuery(api.units.refSummary as any, { id: id as any, limit: 3 } as any) as any;
    const total = Number(summary?.products?.count ?? 0);
    const hasRefs = total > 0;

    const Description = (
      <div className="space-y-1">
        <div className="text-sm">Đơn vị đang có quan hệ với dữ liệu khác.</div>
        <div className="text-xs text-muted-foreground">Khuyến nghị: dùng nút "Tắt" để ẩn thay vì xóa.</div>
        {hasRefs && (
          <ul className="list-disc list-inside text-xs">
            <li>{`Sản phẩm: ${total}`}</li>
          </ul>
        )}
      </div>
    );

    const btn = (
      <Button size="sm" variant="destructive" onClick={onDelete}>
        {hasRefs ? <AlertTriangle className="mr-2 h-4 w-4" /> : <Trash2 className="mr-2 h-4 w-4" />}
        Xóa
      </Button>
    );

    if (!hasRefs) return btn as any;
    return (
      <Tooltip>
        <TooltipTrigger asChild>{btn as any}</TooltipTrigger>
        <TooltipContent side="top">{Description as any}</TooltipContent>
      </Tooltip>
    ) as any;
  }

  const onDelete = async (id: string, name: string) => {
    try {
      const res = await doDelete({ id: id as any });
      if (res && typeof res === "object" && "success" in res && !(res as any).success) {
        const refs: any[] | undefined = (res as any).refs;
        if (Array.isArray(refs) && refs.length > 0) {
          const labelMap: Record<string, string> = { products: "Sản phẩm" };
          const parts: string[] = refs.map((r) => {
            const table: string = r.table || "unknown";
            const count: number = r.count ?? 0;
            const samples: any[] = Array.isArray(r.samples) ? r.samples : [];
            const labels = samples.map((s: any) => s?.name || s?.id || "...");
            const extra = Math.max(0, count - labels.length);
            const head = `${labelMap[table] ?? table}: ${count}`;
            const sampleStr = labels.length ? `; ví dụ: ${labels.join(", ")}` : "";
            const moreStr = extra > 0 ? ` … (+${extra})` : "";
            return head + sampleStr + moreStr;
          });
          toast.error(`Không thể xóa vì đang được tham chiếu | ` + parts.join(" | "));
        } else {
          const reason = (res as any).message || "Không thể xóa đơn vị vì đang được tham chiếu";
          toast.error(reason);
        }
        return;
      }
      toast.success(`Đã xóa đơn vị: ${name}`);
    } catch (err: any) {
      toast.error(err?.message ?? "Xóa thất bại");
    }
  };

  const onToggle = async (id: string, next: boolean) => {
    try {
      await toggleActive({ id: id as any, active: next });
    } catch (err: any) {
      toast.error(err?.message ?? "Cập nhật trạng thái thất bại");
    }
  };

  function arrayMove<T>(arr: T[], from: number, to: number) {
    const copy = [...arr];
    const [item] = copy.splice(from, 1);
    copy.splice(to, 0, item);
    return copy;
  }

  const onDropReorder = async (sourceId: string, targetId: string) => {
    if (!list || !allowDrag) return;
    const from = list.findIndex((u) => String(u._id) === String(sourceId));
    const to = list.findIndex((u) => String(u._id) === String(targetId));
    if (from < 0 || to < 0 || from === to) return;
    const newList = arrayMove(list, from, to);
    setList(newList);
    try {
      await doReorder({ items: newList.map((u, idx) => ({ id: u._id as any, order: idx })) });
    } catch (err: any) {
      toast.error(err?.message ?? "Sắp xếp thất bại");
    }
  };

  return (
    <div className="space-y-4">
      <div className="flex flex-wrap items-center justify-between gap-2">
        <h2 className="text-xl font-semibold">Đơn vị tính</h2>
        <div className="flex items-center gap-2">
          <div className="hidden sm:flex items-center gap-1 rounded-md border p-1">
            <Button size="sm" variant={statusFilter === "all" ? "default" : "ghost"} onClick={() => setStatusFilter("all")}>Tất cả</Button>
            <Button size="sm" variant={statusFilter === "active" ? "default" : "ghost"} onClick={() => setStatusFilter("active")}>Đang dùng</Button>
            <Button size="sm" variant={statusFilter === "inactive" ? "default" : "ghost"} onClick={() => setStatusFilter("inactive")}>Tạm tắt</Button>
          </div>
          <div className="relative">
            <Search className="pointer-events-none absolute left-2 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Tìm kiếm..."
              className="pl-8 w-64"
